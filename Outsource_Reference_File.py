'''
    ver 1:
    - File reads the gdf excel sheet and uses stage 1 groups width and height to create a GA solution which is optimised for area and netlength.
      The results are shown on the plot.
    - Next variant of stage1 groups using the shapely width and height and creates a irregular shape. This shape is used to create another GA solution
      which tries to optimise for area and netlength. The results are shown on the plot.
    - None of the solution is optimised. 
'''


from shapely import affinity
from shapely.affinity import translate, rotate
import geopandas as gpd
from shapely.wkt import loads
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import shapely.geometry as geom
from shapely.ops import unary_union
import ast
import time
import math
from ga_utilities import find_solution
from GA_shapely_placement_analysis import GA_shapely_placement_analysis_stage3

####################################################
# Function to generate data for the 1st variant GA
####################################################
def create_data_for_GA(gdf):
    global_shapes = {}
    global_conn_place = {}
    global_connections = set()
    global_netnames = {}

    unique_indices = gdf['index'].unique()
    unique_indices = unique_indices[~np.isnan(unique_indices)]  
    
    for idx in unique_indices:
        filtered_gdf = gdf[(gdf['index'] == idx)]
        Group_Polygons = filtered_gdf['geometry']
        Area, width, height = find_polygon_area(Group_Polygons)
        global_shapes[idx] = (width, height)

        filtered_nets_gdf = gdf[(gdf['stage3_Comm_Indx_GA'] == 0) & (gdf['NetName'] != 'na')]
        # Group by 'NetName' and create lines for each group
        lines = []
        net_names = []
        distance = 0
        for net_name, group in filtered_nets_gdf.groupby('NetName'):
            if len(group.geometry) > 1:
                for _,row in group.iterrows():
                    if row['index'] == idx:
                        #print(net_name ,  row['index'], row['Second_ID'], row['geometry'])
                        global_conn_place[(row['index'], row['Second_ID'])] = (row['geometry'].x, row['geometry'].y)
                        global_netnames[(row['index'], row['Second_ID'])] = net_name
                for q in range(len(group) - 1):
                    current = (group.iloc[q]['index'], (group.iloc[q]['Second_ID']))
                    next_row = (group.iloc[q + 1]['index'], (group.iloc[q + 1]['Second_ID']))
                    if (current,next_row) not in global_connections:
                        global_connections.add((current,next_row))
    return(global_shapes, global_conn_place, global_connections, global_netnames)

####################################################
# Function to Create_GA_variant1_solution
####################################################
def create_GA_variant1_solution(global_shapes, global_conn_place, global_connections):
    Generation_Size = 100
    Population = 500

    global_top_side_only = True
    global_area_constraint = True
    
    global_edges ={}
    global_edges[0]=0
    global_edges[1]=0
    
    global_footprint_num ={}

    global_rd_mapping ={}
    global_margins = [2,2]

    run_ga_variant1 = False
    if (run_ga_variant1):
        print('Running the GA Variant1 program')
        res = find_solution(global_shapes, global_connections, global_conn_place,global_edges, global_footprint_num, global_rd_mapping,\
                            global_margins, global_top_side_only, global_area_constraint,"global.jpg", gen_size = Generation_Size, num_pop = Population)

        best_w, best_h, best_final_conn_place, best_edge1,best_edge2, best_rotations, best_pts, best_whs, best_colors, best_wires, footprint_num = res
    else: 
        global_shapes = {0: (25.299999999999997, 25.299999999999997), 1: (9.719999999999999, 13.6), 2: (12.16, 6.46), 3: (4.5, 3.3), 4: (3.8600000000000003, 3.3), 5: (2.8000000000000003, 3.3), 6: (5.4, 3.3), 7: (6.6000000000000005, 3.3), 8: (3.2, 5.6), 9: (4.36, 3.3), 10: (9.82, 13.600000000000001), 11: (5.7, 3.5), 12: (9.74, 20.099999999999998), 13: (11.899999999999999, 10.6), 14: (3.9, 9.6), 15: (7.76, 3.3), 16: (17.4, 25.599999999999998), 17: (7.1, 17.099999999999998), 18: (18.560000000000002, 32.2), 19: (15.5, 6.199999999999999), 20: (9.4, 7.799999999999999), 21: (15.58, 7.3), 22: (10.4, 11.84), 23: (12.16, 6.46), 24: (21.1, 16.900000000000002), 25: (11.799999999999999, 3.96), 26: (3.2, 5.6), 27: (9.3, 7.1), 28: (21.1, 16.8), 29: (3.2, 6.3), 30: (4.36, 3.3), 31: (9.2, 7.78), 32: (5.5, 9.2), 33: (2.54, 2.54), 34: (5.48, 2.68), 35: (5.48, 2.68)}
        global_connections = {((0, ('r1249', '1')), (28, ('r668', '1'))), ((5, ('r2376', '1')), (10, ('u37', '26'))), ((0, ('u75', '20')), (26, ('u74', '3'))), ((10, ('u37', '10')), (12, ('r2217', '2'))), ((0, ('u75', '21')), (29, ('u71', '3'))), ((22, ('q6', '2')), (27, ('tp82', '1'))), ((16, ('r2256', '2')), (23, ('sw4', '1'))), ((13, ('j418', '1')), (20, ('fl7', '1'))), ((10, ('u37', '15')), (18, ('l8', '4'))), ((10, ('u37', '25')), (11, ('r2377', '1'))), ((4, ('r2013', '2')), (10, ('u37', '31'))), ((27, ('tp82', '1')), (32, ('j15', '1'))), ((0, ('u75', '38')), (32, ('j15', '1'))), ((7, ('r2014', '2')), (10, ('u37', '32'))), ((10, ('u37', '20')), (11, ('r2191', '2'))), ((0, ('r1248', '1')), (28, ('r671', '1'))), ((0, ('u75', '20')), (22, ('j31', '2'))), ((12, ('r2217', '1')), (13, ('j418', '1'))), ((12, ('y4', '3')), (14, ('r2323', '1'))), ((19, ('r648', '1')), (31, ('j18', '1'))), ((0, ('u75', '86')), (9, ('r2255', '2'))), ((0, ('u75', '66')), (13, ('r2375', '1'))), ((0, ('u75', '62')), (11, ('r1998', '2'))), ((12, ('r2226', '1')), (23, ('sw4', '1'))), ((12, ('r2226', '1')), (16, ('r2256', '2'))), ((10, ('u37', '10')), (13, ('j418', '10'))), ((16, ('r2256', '2')), (17, ('l6', '2'))), ((0, ('u75', '63')), (11, ('r1999', '2'))), ((0, ('u75', '38')), (22, ('q6', '2'))), ((0, ('r1893', '1')), (19, ('r482', '1'))), ((0, ('u75', '47')), (10, ('r2282', '1'))), ((0, ('u75', '56')), (5, ('r2006', '1'))), ((0, ('u75', '49')), (17, ('r444', '1'))), ((0, ('u75', '64')), (11, ('r2000', '2'))), ((0, ('u75', '171')), (1, ('r2358', '2'))), ((10, ('u37', '5')), (14, ('r2319', '2'))), ((10, ('u37', '4')), (20, ('c3862', '1'))), ((0, ('u75', '29')), (15, ('r2225', '2'))), ((10, ('u37', '19')), (13, ('j418', '6'))), ((0, ('u75', '61')), (11, ('r1997', '2'))), ((12, ('r2217', '2')), (13, ('j418', '10'))), ((10, ('u37', '18')), (13, ('j418', '8'))), ((0, ('u75', '160')), (1, ('r1895', '2'))), ((10, ('u37', '22')), (20, ('fl7', '2'))), ((0, ('r2253', '1')), (16, ('r2369', '1'))), ((0, ('u75', '41')), (12, ('r2228', '1'))), ((12, ('r2226', '1')), (17, ('l6', '2'))), ((4, ('r2010', '1')), (17, ('r2218', '1'))), ((11, ('r2191', '1')), (12, ('r2217', '1'))), ((0, ('u75', '54')), (3, ('r2284', '1'))), ((10, ('u37', '17')), (13, ('j418', '2'))), ((22, ('q6', '2')), (32, ('j15', '1'))), ((0, ('u75', '40')), (16, ('r2366', '1'))), ((10, ('u37', '6')), (14, ('r2323', '2'))), ((0, ('u75', '44')), (16, ('r2248', '1'))), ((22, ('j31', '2')), (26, ('u74', '3'))), ((0, ('u75', '55')), (6, ('r2007', '1'))), ((0, ('u75', '42')), (16, ('r2250', '1'))), ((5, ('r2006', '2')), (17, ('r446', '1'))), ((10, ('r2210', '1')), (12, ('r2217', '1'))), ((0, ('u75', '16')), (21, ('tp264', '1'))), ((10, ('u37', '14')), (18, ('l8', '1'))), ((11, ('r2191', '1')), (20, ('fl7', '1'))), ((0, ('r1988', '1')), (22, ('q6', '1'))), ((0, ('u75', '25')), (25, ('r1987', '1'))), ((0, ('r2168', '1')), (19, ('r475', '1'))), ((3, ('r2008', '2')), (17, ('r427', '1'))), ((0, ('u75', '50')), (4, ('r2274', '2'))), ((0, ('r2169', '1')), (19, ('r478', '1'))), ((10, ('u37', '28')), (13, ('j418', '4'))), ((0, ('u75', '118')), (24, ('r1246', '1'))), ((7, ('r2009', '2')), (17, ('r430', '1'))), ((10, ('r2210', '1')), (20, ('fl7', '1'))), ((0, ('u75', '51')), (7, ('r2283', '1'))), ((0, ('u75', '65')), (11, ('r2377', '2'))), ((10, ('u37', '12')), (15, ('r2146', '1'))), ((6, ('r2007', '2')), (17, ('r429', '1'))), ((10, ('r2210', '1')), (11, ('r2191', '1'))), ((2, ('sw5', '1')), (23, ('sw4', '1'))), ((17, ('l6', '2')), (23, ('sw4', '1'))), ((0, ('u75', '38')), (27, ('tp82', '1'))), ((2, ('r1114', '1')), (3, ('r2374', '1'))), ((10, ('u37', '24')), (11, ('r1997', '1'))), ((10, ('u37', '23')), (11, ('r1998', '1'))), ((0, ('u75', '45')), (16, ('r2254', '1'))), ((0, ('u75', '19')), (8, ('u72', '3'))), ((0, ('u75', '18')), (31, ('j427', '1'))), ((0, ('r2249', '1')), (16, ('r2367', '1'))), ((0, ('u75', '48')), (10, ('r2281', '1'))), ((0, ('u75', '82')), (2, ('r1240', '2'))), ((0, ('u75', '23')), (25, ('y2', '2'))), ((11, ('r2191', '1')), (13, ('j418', '1'))), ((0, ('u75', '52')), (10, ('r2015', '1'))), ((21, ('tp92', '1')), (31, ('j427', '1'))), ((6, ('r2046', '2')), (10, ('u37', '29'))), ((10, ('u37', '21')), (11, ('r2190', '1'))), ((2, ('sw5', '1')), (12, ('r2226', '1'))), ((0, ('r2251', '1')), (16, ('r2370', '1'))), ((2, ('sw5', '1')), (17, ('l6', '2'))), ((12, ('r2217', '1')), (20, ('fl7', '1'))), ((0, ('u75', '69')), (10, ('u37', '11'))), ((10, ('r2210', '1')), (13, ('j418', '1'))), ((10, ('u37', '2')), (12, ('r2221', '2'))), ((0, ('u75', '18')), (21, ('tp92', '1'))), ((0, ('u75', '30')), (13, ('r2227', '2'))), ((31, ('j18', '3')), (32, ('j13', '1'))), ((10, ('u37', '13')), (30, ('c3874', '1'))), ((0, ('u75', '53')), (10, ('r2016', '1'))), ((0, ('u75', '119')), (24, ('r1247', '1'))), ((3, ('r2047', '2')), (10, ('u37', '30'))), ((10, ('u37', '7')), (20, ('c89', '1'))), ((0, ('u75', '43')), (3, ('r2374', '1'))), ((0, ('u75', '73')), (23, ('r125', '1'))), ((10, ('u37', '8')), (30, ('r2223', '2'))), ((2, ('sw5', '1')), (16, ('r2256', '2'))), ((0, ('u75', '43')), (2, ('r1114', '1')))}
        global_conn_place = {(0, ('r1893', '1')): (0.339999999999995, 7.9), (0, ('u75', '53')): (8.719999999999999, 4.9), (0, ('u75', '49')): (7.42, 4.9), (0, ('u75', '52')): (8.4, 3.3999999999999995), (0, ('u75', '54')): (9.05, 3.3999999999999995), (0, ('u75', '56')): (9.690000000000001, 3.3999999999999995), (0, ('u75', '119')): (21.84, 16.2), (0, ('u75', '73')): (15.219999999999999, 4.9), (0, ('r2249', '1')): (0.339999999999995, 5.9), (0, ('u75', '69')): (13.920000000000002, 4.9), (0, ('r2253', '1')): (0.339999999999995, 8.9), (0, ('u75', '82')): (18.15, 3.3999999999999995), (0, ('u75', '50')): (7.74, 3.3999999999999995), (0, ('u75', '55')): (9.370000000000001, 4.9), (0, ('u75', '18')): (4.9, 13.920000000000002), (0, ('u75', '45')): (6.12, 4.9), (0, ('u75', '118')): (20.34, 15.870000000000001), (0, ('r1988', '1')): (0.339999999999995, 15.400000000000002), (0, ('u75', '51')): (8.07, 4.9), (0, ('u75', '19')): (3.3999999999999995, 13.600000000000001), (0, ('u75', '171')): (6.12, 20.34), (0, ('u75', '21')): (3.3999999999999995, 12.95), (0, ('u75', '38')): (4.9, 7.42), (0, ('r1249', '1')): (0.339999999999995, 17.900000000000002), (0, ('u75', '29')): (3.3999999999999995, 10.34), (0, ('u75', '25')): (3.3999999999999995, 11.64), (0, ('r2168', '1')): (0.339999999999995, 6.9), (0, ('u75', '40')): (4.9, 6.7700000000000005), (0, ('u75', '42')): (4.9, 6.12), (0, ('u75', '86')): (19.45, 3.3999999999999995), (0, ('u75', '65')): (12.620000000000001, 4.9), (0, ('u75', '64')): (12.29, 3.3999999999999995), (0, ('u75', '20')): (4.9, 13.27), (0, ('u75', '62')): (11.64, 3.3999999999999995), (0, ('r2251', '1')): (0.339999999999995, 7.9), (0, ('u75', '160')): (9.690000000000001, 21.84), (0, ('u75', '63')): (11.969999999999999, 4.9), (0, ('u75', '30')): (4.9, 10.02), (0, ('r1248', '1')): (0.3400000000000021, 16.400000000000002), (0, ('u75', '44')): (5.8, 3.3999999999999995), (0, ('u75', '43')): (3.3999999999999995, 5.8), (0, ('u75', '47')): (6.7700000000000005, 4.9), (0, ('u75', '66')): (12.95, 3.3999999999999995), (0, ('r2169', '1')): (0.3400000000000021, 8.9), (0, ('u75', '16')): (4.9, 14.57), (0, ('u75', '41')): (3.3999999999999995, 6.45), (0, ('u75', '61')): (11.32, 4.9), (0, ('u75', '48')): (7.09, 3.3999999999999995), (0, ('u75', '23')): (3.3999999999999995, 12.29), (1, ('r2358', '2')): (3.6, 11.539999999999997), (1, ('r1895', '2')): (3.7399999999999984, 9.9), (2, ('r1240', '2')): (2.0, 3.859999999999998), (2, ('r1114', '1')): (2.0, 3.859999999999998), (2, ('sw5', '1')): (4.83, 5.63), (3, ('r2284', '1')): (0.41999999999999993, 0.32), (3, ('r2374', '1')): (1.3, 2.96), (3, ('r2047', '2')): (4.16, 0.4), (3, ('r2008', '2')): (0.30000000000000004, 2.96), (4, ('r2274', '2')): (3.54, 0.32), (4, ('r2013', '2')): (0.26000000000000023, 0.35000000000000003), (4, ('r2010', '1')): (3.4000000000000004, 2.96), (5, ('r2006', '1')): (0.41999999999999993, 0.32), (5, ('r2376', '1')): (2.5400000000000005, 3.05), (5, ('r2006', '2')): (1.44, 0.32), (6, ('r2007', '1')): (3.02, 0.32), (6, ('r2046', '2')): (5.140000000000001, 3.05), (6, ('r2007', '2')): (4.04, 0.32), (7, ('r2283', '1')): (3.02, 0.32), (7, ('r2009', '2')): (2.9000000000000004, 2.96), (7, ('r2014', '2')): (6.34, 0.35), (8, ('u72', '3')): (1.6, 2.45), (9, ('r2255', '2')): (4.04, 0.32), (10, ('r2016', '1')): (5.65, 12.14), (10, ('r2015', '1')): (6.15, 12.14), (10, ('u37', '11')): (5.109999999999999, 4.21), (10, ('r2282', '1')): (2.9, 6.340000000000002), (10, ('r2281', '1')): (1.9400000000000017, 12.7), (10, ('u37', '30')): (7.609999999999999, 9.809999999999999), (10, ('u37', '31')): (7.109999999999999, 9.809999999999999), (10, ('u37', '26')): (9.41, 8.51), (10, ('u37', '29')): (8.11, 9.809999999999999), (10, ('u37', '32')): (6.609999999999999, 9.809999999999999), (10, ('u37', '6')): (3.81, 6.51), (10, ('u37', '7')): (3.81, 6.01), (10, ('u37', '4')): (3.81, 7.51), (10, ('u37', '17')): (8.11, 4.21), (10, ('u37', '21')): (9.41, 6.01), (10, ('u37', '2')): (3.81, 8.51), (10, ('u37', '12')): (5.609999999999999, 4.21), (10, ('u37', '22')): (9.41, 6.51), (10, ('u37', '19')): (9.41, 5.01), (10, ('u37', '10')): (4.609999999999999, 4.21), (10, ('u37', '20')): (9.41, 5.51), (10, ('u37', '28')): (8.61, 9.809999999999999), (10, ('u37', '8')): (3.81, 5.51), (10, ('u37', '15')): (7.109999999999999, 4.21), (10, ('u37', '23')): (9.41, 7.01), (10, ('u37', '13')): (6.109999999999999, 4.21), (10, ('u37', '5')): (3.81, 7.01), (10, ('u37', '14')): (6.609999999999999, 4.21), (10, ('u37', '25')): (9.41, 8.01), (10, ('u37', '24')): (9.41, 7.51), (10, ('u37', '18')): (8.61, 4.21), (10, ('r2210', '1')): (0.43999999999999995, 9.25), (11, ('r2377', '2')): (4.66, 1.2999999999999998), (11, ('r2000', '2')): (5.44, 0.55), (11, ('r1998', '2')): (5.44, 3.25), (11, ('r1999', '2')): (0.5600000000000003, 3.25), (11, ('r1997', '2')): (0.76, 1.25), (11, ('r2190', '1')): (2.36, 0.29999999999999993), (11, ('r2191', '2')): (3.1399999999999997, 0.52), (11, ('r1998', '1')): (4.760000000000001, 3.25), (11, ('r2377', '1')): (3.6400000000000006, 1.3000000000000003), (11, ('r1997', '1')): (1.4400000000000004, 1.25), (11, ('r2191', '1')): (2.12, 0.52), (12, ('r2228', '1')): (2.959999999999998, 12.3), (12, ('r2226', '1')): (3.25, 19.66), (12, ('r2221', '2')): (0.43999999999999995, 11.5), (12, ('r2217', '2')): (0.43999999999999995, 11.5), (12, ('r2217', '1')): (1.4599999999999995, 11.5), (12, ('y4', '3')): (8.36, 7.94), (13, ('r2227', '2')): (11.559999999999999, 6.7), (13, ('r2375', '1')): (5.9, 10.259999999999998), (13, ('j418', '2')): (3.4000000000000004, 6.54), (13, ('j418', '6')): (5.94, 6.54), (13, ('j418', '10')): (8.48, 6.54), (13, ('j418', '4')): (4.67, 6.54), (13, ('j418', '8')): (7.21, 6.54), (13, ('j418', '1')): (3.4000000000000004, 2.4800000000000004), (14, ('r2323', '2')): (1.3599999999999999, 8.7), (14, ('r2319', '2')): (1.0, 1.04), (14, ('r2323', '1')): (0.34000000000000025, 8.7), (15, ('r2225', '2')): (7.3, 2.96), (15, ('r2146', '1')): (6.42, 0.32), (16, ('r2367', '1')): (11.75, 24.139999999999997), (16, ('r2369', '1')): (4.75, 24.139999999999997), (16, ('r2254', '1')): (4.1400000000000015, 22.7), (16, ('r2366', '1')): (17.060000000000006, 11.0), (16, ('r2250', '1')): (9.639999999999995, 22.7), (16, ('r2370', '1')): (4.75, 24.139999999999997), (16, ('r2248', '1')): (6.6400000000000015, 22.7), (16, ('r2256', '2')): (6.7, 24.560000000000002), (17, ('r444', '1')): (1.35, 0.2600000000000038), (17, ('l6', '2')): (0.30000000000000004, 13.760000000000002), (17, ('r427', '1')): (3.85, 0.26000000000000023), (17, ('r2218', '1')): (3.85, 13.339999999999996), (17, ('r446', '1')): (6.85, 13.339999999999996), (17, ('r429', '1')): (5.35, 13.34), (17, ('r430', '1')): (2.85, 0.26000000000000023), (18, ('l8', '4')): (2.1500000000000004, 28.879999999999995), (18, ('l8', '1')): (1.1500000000000004, 28.879999999999995), (19, ('r482', '1')): (15.239999999999998, 4.75), (19, ('r475', '1')): (15.239999999999995, 1.25), (19, ('r478', '1')): (15.239999999999995, 3.25), (19, ('r648', '1')): (0.42999999999999927, 2.95), (20, ('c89', '1')): (6.15, 5.839999999999998), (20, ('c3862', '1')): (3.15, 5.909999999999998), (20, ('fl7', '2')): (5.51, 0.56), (20, ('fl7', '1')): (4.13, 0.56), (21, ('tp92', '1')): (7.1, 1.6), (21, ('tp264', '1')): (13.99, 1.79), (22, ('q6', '1')): (1.0500000000000003, 4.52), (22, ('q6', '2')): (3.35, 4.52), (22, ('j31', '2')): (9.05, 7.199999999999999), (23, ('r125', '1')): (2.0, 3.86), (23, ('sw4', '1')): (4.83, 5.63), (24, ('r1247', '1')): (0.9400000000000013, 16.6), (24, ('r1246', '1')): (3.5999999999999996, 16.459999999999997), (25, ('r1987', '1')): (0.740000000000002, 1.2999999999999998), (25, ('y2', '2')): (8.16, 2.18), (26, ('u74', '3')): (1.6, 2.45), (27, ('tp82', '1')): (4.29, 1.59), (28, ('r668', '1')): (3.5999999999999996, 16.459999999999997), (28, ('r671', '1')): (3.7400000000000015, 13.8), (29, ('u71', '3')): (1.6, 2.45), (30, ('r2223', '2')): (2.9000000000000004, 2.96), (30, ('c3874', '1')): (3.02, 0.32), (31, ('j427', '1')): (1.4799999999999995, 4.15), (31, ('j18', '1')): (7.85, 6.43), (31, ('j18', '3')): (7.85, 1.35), (32, ('j15', '1')): (1.4700000000000002, 1.34), (32, ('j13', '1')): (4.15, 7.72)}
        best_rotations = {33: 2, 28: 3, 15: 2, 24: 3, 32: 2, 18: 0, 26: 3, 27: 2, 25: 0, 21: 2, 22: 0, 8: 2, 6: 2, 12: 3, 16: 2, 4: 1, 31: 1, 29: 2, 1: 2, 34: 2, 14: 2, 13: 0, 0: 2, 2: 3, 23: 0, 19: 2, 3: 3, 30: 3, 11: 1, 10: 1, 17: 2, 7: 1, 20: 2, 9: 1, 5: 2, 35: 1}
        best_pts = {33: (0, 0), 28: (0, 4.54), 15: (18.8, 0), 24: (18.8, 5.3), 32: (37.7, 0), 18: (45.2, 0), 26: (37.7, 34.2), 27: (45.300000000000004, 34.2), 25: (56.6, 34.2), 21: (0, 43.300000000000004), 22: (0, 52.60000000000001), 8: (17.58, 43.300000000000004), 6: (22.78, 43.300000000000004), 12: (30.18, 43.300000000000004), 16: (30.18, 55.040000000000006), 4: (52.28, 43.300000000000004), 31: (52.28, 49.160000000000004), 29: (62.06, 49.160000000000004), 1: (0, 82.64), 34: (0, 98.24), 14: (0, 102.92), 13: (0, 114.52000000000001), 0: (13.899999999999999, 82.64), 2: (41.199999999999996, 82.64), 23: (13.899999999999999, 109.94), 19: (13.899999999999999, 118.4), 3: (31.4, 118.4), 30: (49.66, 82.64), 11: (54.959999999999994, 82.64), 10: (49.66, 90.34), 17: (65.25999999999999, 90.34), 7: (49.66, 109.44), 20: (54.959999999999994, 109.44), 9: (66.36, 109.44), 5: (66.36, 115.8), 35: (66.36, 121.1)}
        best_whs = {33: (2.54, 2.54), 28: (16.8, 21.1), 15: (7.76, 3.3), 24: (16.900000000000002, 21.1), 32: (5.5, 9.2), 18: (18.560000000000002, 32.2), 26: (5.6, 3.2), 27: (9.3, 7.1), 25: (11.799999999999999, 3.96), 21: (15.58, 7.3), 22: (10.4, 11.84), 8: (3.2, 5.6), 6: (5.4, 3.3), 12: (20.099999999999998, 9.74), 16: (17.4, 25.599999999999998), 4: (3.3, 3.8600000000000003), 31: (7.78, 9.2), 29: (3.2, 6.3), 1: (9.719999999999999, 13.6), 34: (5.48, 2.68), 14: (3.9, 9.6), 13: (11.899999999999999, 10.6), 0: (25.299999999999997, 25.299999999999997), 2: (6.46, 12.16), 23: (12.16, 6.46), 19: (15.5, 6.199999999999999), 3: (3.3, 4.5), 30: (3.3, 4.36), 11: (3.5, 5.7), 10: (13.600000000000001, 9.82), 17: (7.1, 17.099999999999998), 7: (3.3, 6.6000000000000005), 20: (9.4, 7.799999999999999), 9: (3.3, 4.36), 5: (2.8000000000000003, 3.3), 35: (2.68, 5.48)}
        best_colors = {33: 'b', 28: 'b', 15: 'b', 24: 'b', 32: 'b', 18: 'b', 26: 'b', 27: 'b', 25: 'b', 21: 'b', 22: 'b', 8: 'b', 6: 'b', 12: 'b', 16: 'b', 4: 'b', 31: 'b', 29: 'b', 1: 'b', 34: 'b', 14: 'b', 13: 'b', 0: 'b', 2: 'b', 23: 'b', 19: 'b', 3: 'b', 30: 'b', 11: 'b', 10: 'b', 17: 'b', 7: 'b', 20: 'b', 9: 'b', 5: 'b', 35: 'b'}
        best_wires = [(59.05, 96.45, 49.98, 83.98, 'k'), (49.84, 49.790000000000006, 40.879999999999995, 56.08, 'k'), (46.83, 89.97, 72.05999999999999, 93.68, 'k'), (54.01, 90.78, 41.68, 51.580000000000005, 'k'), (27.229999999999997, 103.03999999999999, 55.209999999999994, 83.2, 'k'), (57.93999999999999, 84.76, 60.23, 116.67999999999999, 'k'), (35.8, 94.34, 19.18, 46.45, 'k'), (55.25, 99.75, 57.16, 86.28, 'k'), (57.93999999999999, 84.76, 3.4000000000000004, 117.00000000000001, 'k'), (34.3, 97.92, 11.559999999999999, 121.22000000000001, 'k'), (27.559999999999995, 104.53999999999999, 55.209999999999994, 88.08, 'k'), (59.05, 94.95, 41.68, 52.60000000000001, 'k'), (38.86, 102.03999999999999, 35.83, 56.50000000000001, 'k'), (31.799999999999997, 118.74000000000001, 53.45, 97.95, 'k'), (57.75, 99.75, 57.93999999999999, 85.78, 'k'), (23.979999999999997, 103.03999999999999, 15.899999999999999, 113.8, 'k'), (8.48, 49.0, 55.910000000000004, 50.64, 'k'), (25.279999999999994, 103.03999999999999, 59.05, 95.45, 'k'), (54.01, 90.78, 60.23, 116.67999999999999, 'k'), (54.01, 90.78, 3.4000000000000004, 117.00000000000001, 'k'), (35.8, 96.3, 57.34, 35.5, 'k'), (21.049999999999997, 104.53999999999999, 45.059999999999995, 92.8, 'k'), (38.86, 90.03999999999999, 16.459999999999997, 22.04, 'k'), (57.75, 94.15, 52.62, 84.1, 'k'), (72.05999999999999, 93.68, 18.729999999999997, 115.57, 'k'), (50.31, 39.71, 41.730000000000004, 7.859999999999999, 'k'), (53.45, 98.95, 4.67, 121.06000000000002, 'k'), (41.68, 52.60000000000001, 8.48, 121.06000000000002, 'k'), (3.35, 57.120000000000005, 50.31, 39.71, 'k'), (28.97, 121.65, 53.63, 57.010000000000005, 'k'), (29.509999999999994, 86.1, 5.98, 86.34, 'k'), (31.779999999999994, 103.03999999999999, 71.00999999999999, 107.17999999999999, 'k'), (52.61, 115.78, 53.45, 96.95, 'k'), (34.3, 94.67, 9.05, 59.80000000000001, 'k'), (54.75, 94.15, 41.68, 52.60000000000001, 'k'), (33.39999999999999, 104.53999999999999, 40.94, 57.940000000000005, 'k'), (58.25, 99.75, 5.94, 121.06000000000002, 'k'), (30.799999999999997, 104.53999999999999, 51.12, 96.49000000000001, 'k'), (31.459999999999994, 104.53999999999999, 55.26, 46.84, 'k'), (26.909999999999997, 104.53999999999999, 57.91, 88.08, 'k'), (56.75, 94.15, 2.54, 103.82000000000001, 'k'), (40.879999999999995, 56.08, 72.05999999999999, 93.68, 'k'), (38.85999999999999, 91.53999999999999, 13.8, 21.9, 'k'), (38.86, 99.03999999999999, 42.83, 56.50000000000001, 'k'), (57.25, 94.15, 58.209999999999994, 111.4, 'k'), (59.05, 97.45, 47.35, 28.879999999999995, 'k'), (50.0, 112.34, 69.50999999999999, 107.18, 'k'), (49.84, 49.790000000000006, 18.729999999999997, 115.57, 'k'), (66.62, 116.05, 54.75, 99.75, 'k'), (35.8, 102.14, 45.059999999999995, 92.8, 'k'), (52.620000000000005, 46.7, 68.50999999999999, 94.10000000000001, 'k'), (38.86, 101.03999999999999, 14.160000000000004, 123.35000000000001, 'k'), (38.86, 92.53999999999999, 1.0500000000000003, 57.120000000000005, 'k'), (32.42999999999999, 103.03999999999999, 56.919999999999995, 93.24000000000001, 'k'), (35.8, 102.14, 34.36, 121.60000000000001, 'k'), (54.01, 90.78, 57.93999999999999, 84.76, 'k'), (34.3, 100.52, 41.730000000000004, 7.859999999999999, 'k'), (46.83, 89.97, 40.879999999999995, 56.08, 'k'), (31.129999999999995, 103.03999999999999, 52.63999999999999, 112.46, 'k'), (35.8, 94.99, 63.660000000000004, 53.010000000000005, 'k'), (58.71, 57.010000000000005, 39.050000000000004, 1.4799999999999995, 'k'), (55.230000000000004, 43.56, 53.45, 97.45, 'k'), (33.08, 103.03999999999999, 43.44, 57.940000000000005, 'k'), (29.509999999999994, 104.53999999999999, 68.74, 118.78, 'k'), (27.879999999999995, 103.03999999999999, 57.209999999999994, 83.4, 'k'), (38.12, 44.68000000000001, 3.5599999999999996, 103.82000000000001, 'k'), (17.359999999999996, 91.74, 35.400000000000006, 25.46, 'k'), (34.36, 122.60000000000001, 68.50999999999999, 107.18, 'k'), (55.75, 94.15, 61.209999999999994, 111.33, 'k'), (38.86, 100.03999999999999, 42.83, 56.50000000000001, 'k'), (49.84, 49.790000000000006, 72.05999999999999, 93.68, 'k'), (41.68, 51.580000000000005, 60.23, 116.67999999999999, 'k'), (33.08, 87.6, 6.119999999999999, 84.7, 'k'), (34.3, 93.37, 1.5899999999999999, 48.81, 'k'), (34.3, 94.02, 55.910000000000004, 50.64, 'k'), (55.75, 99.75, 57.209999999999994, 84.08, 'k'), (30.149999999999995, 104.53999999999999, 31.72, 122.48, 'k'), (57.25, 99.75, 58.16, 85.0, 'k'), (34.3, 101.82, 37.940000000000005, 57.940000000000005, 'k'), (38.85999999999999, 99.03999999999999, 14.160000000000004, 121.35000000000001, 'k'), (26.249999999999996, 104.53999999999999, 5.9, 124.78, 'k'), (32.11, 104.53999999999999, 50.56, 92.28, 'k'), (59.05, 96.95, 46.35, 28.879999999999995, 'k'), (46.83, 89.97, 49.84, 49.790000000000006, 'k'), (38.86, 100.03999999999999, 14.16, 119.85000000000001, 'k'), (3.4000000000000004, 117.00000000000001, 60.23, 116.67999999999999, 'k'), (23.04, 43.550000000000004, 53.45, 98.45, 'k'), (34.3, 94.02, 8.48, 49.0, 'k'), (19.749999999999996, 104.53999999999999, 69.34, 113.48, 'k'), (59.05, 98.95, 7.21, 121.06000000000002, 'k'), (34.3, 94.67, 40.150000000000006, 35.800000000000004, 'k'), (34.3, 100.52, 50.31, 39.71, 'k'), (24.14, 46.28, 67.00999999999999, 94.1, 'k'), (59.05, 94.95, 8.48, 121.06000000000002, 'k'), (18.859999999999996, 92.07, 35.26, 22.8, 'k'), (34.3, 100.52, 3.35, 57.120000000000005, 'k'), (35.8, 97.6, 19.26, 0.33999999999999986, 'k'), (34.3, 101.17, 30.519999999999992, 69.64, 'k'), (67.72, 118.78, 65.50999999999999, 94.10000000000001, 'k'), (56.25, 99.75, 55.209999999999994, 87.4, 'k'), (46.83, 89.97, 18.729999999999997, 115.57, 'k'), (9.05, 59.80000000000001, 40.150000000000006, 35.800000000000004, 'k'), (35.8, 101.49, 42.480000000000004, 50.080000000000005, 'k'), (41.68, 51.580000000000005, 3.4000000000000004, 117.00000000000001, 'k'), (45.059999999999995, 92.8, 34.36, 121.60000000000001, 'k'), (29.829999999999995, 103.03999999999999, 25.16, 46.28, 'k'), (56.75, 99.75, 58.849999999999994, 116.67999999999999, 'k'), (59.05, 95.95, 20.14, 2.98, 'k'), (35.8, 95.65, 64.76, 36.38, 'k'), (40.879999999999995, 56.08, 18.729999999999997, 115.57, 'k'), (59.05, 98.45, 3.4000000000000004, 121.06000000000002, 'k'), (3.35, 57.120000000000005, 41.730000000000004, 7.859999999999999, 'k'), (26.579999999999995, 103.03999999999999, 57.16, 87.3, 'k'), (56.25, 94.15, 2.9, 111.48, 'k'), (30.479999999999997, 103.03999999999999, 51.12, 95.99000000000001, 'k'), (57.93999999999999, 84.76, 41.68, 51.580000000000005, 'k')]

    fig, ax = plt.subplots()
    x_list = []
    y_list = []
    for i in range(len(best_pts)):
        if best_rotations[i] in [1,3]:
            width = global_shapes[i][1]
            height = global_shapes[i][0]
        else:
            width = global_shapes[i][0]
            height = global_shapes[i][1]
        x = best_pts[i][0] + global_margins[0]/2
        y = best_pts[i][1] + global_margins[1]/2
        x_list.append(x+width)
        y_list.append(y+height)
        ax.add_patch(plt.Rectangle(( x , y ), width , height, fill=False, color='blue', linewidth=1))
        ax.text((x+width/2),(y+height/2), str(i), fontsize=6, color='grey')

    brd_width = max(x_list)
    brd_height = max(y_list)
    Area = round(brd_width * brd_height,0)
    total_distance = 0 
    for (x1,y1,x2,y2,_) in best_wires:
        distance  = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
        x_coords = [x1 + global_margins[0]/2 , x2 + global_margins[0]/2]
        y_coords = [y1 + global_margins[1]/2 , y2 + global_margins[1]/2]
        ax.plot(x_coords, y_coords, color='grey', linestyle='-', linewidth=0.25)
        total_distance += distance
    total_distance = round(total_distance,0)
    
    ax.add_patch(plt.Rectangle(( 0 , 0 ), brd_width , brd_height, fill=False, color='brown', linewidth=1))
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    Title = f'Distance - {total_distance} , Area - {Area}'
    plt.title(Title)
    plt.axis('equal')
    plt.show()

####################################################
# Selective function to remove the eval
####################################################
def safe_eval_if_tuple(s):
    # Check if the string looks like a tuple: starts with '(' and ends with ')'
    if isinstance(s, str) and s.startswith('(') and s.endswith(')'):
        return ast.literal_eval(s)
    return s  # Return the original value if it's not a tuple-like string

####################################################
# Function to create stage1 plots
####################################################
def Create_stage1_plots(gdf, Plot = False):
    gdf.set_geometry('geometry', inplace=True)
    # Get unique index values
    unique_indices = gdf['index'].unique()
    unique_indices = unique_indices[~np.isnan(unique_indices)]    

    # Print the stage2_solution. 
    for idx in unique_indices:
        Create_stage_plots(gdf,idx,'index', 'geometry',Plot)
    gdf.set_geometry('geometry', inplace=True)
    return()

####################################################
# Function to create stage1 plots
####################################################
def Create_stage2_plots(gdf, Plot = False):
    gdf.set_geometry('stage3_geometry', inplace=True)
    # Get unique index values
    unique_indices = gdf['stage3_Comm_Indx'].unique()
    unique_indices = unique_indices[~np.isnan(unique_indices)]    

    # Print the stage2_solution. 
    for idx in unique_indices:
        Create_stage_plots(gdf,idx,'stage3_Comm_Indx', 'stage3_geometry',Plot)
    gdf.set_geometry('geometry', inplace=True)
    return()

####################################################
# Function to create stage1 plots
####################################################
def Create_stage3_plots(gdf, Plot = False):
    gdf.set_geometry('stage3_geometry_GA', inplace=True)
    # Get unique index values
    unique_indices = gdf['stage3_Comm_Indx_GA'].unique()
    unique_indices = unique_indices[~np.isnan(unique_indices)]    

    # Print the stage2_solution. 
    for idx in unique_indices:
        Create_stage_plots(gdf,idx,'stage3_Comm_Indx_GA', 'stage3_geometry_GA',Plot)
    gdf.set_geometry('geometry', inplace=True)
    return()

####################################################
# Function which creates lines for groups within
####################################################
def create_intra_group_lines(gdf, index_column, idx,  ax):
    filtered_nets_gdf = gdf[(gdf[index_column] == idx) & (gdf['NetName'] != 'na')]
    # Group by 'NetName' and create lines for each group
    lines = []
    net_names = []
    distance = 0
    for net_name, group in filtered_nets_gdf.groupby('NetName'):
        if len(group.geometry) > 1:  # Ensure there are at least two points to create a line
            line = geom.LineString(list(group.geometry))
            lines.append(line)
            net_names.append(net_name)
            # Calculate distances between consecutive points
            point_distances = [group.geometry.iloc[i].distance(group.geometry.iloc[i+1]) for i in range(len(group)-1)]
            distance += sum(point_distances)
    # Create a new GeoDataFrame for lines
    lines_gdf = gpd.GeoDataFrame({'NetName': net_names, 'geometry': lines})

    if not lines_gdf.empty:
        lines_gdf.plot(ax=ax, color='grey', linewidth=0.5)

    distance = round(distance,0)
    return(distance)

####################################################################
# Find the area from list of shapely poloygons. Outputs area. 
####################################################################
def find_polygon_area(transformed_polygons):
    combined = unary_union(transformed_polygons)
    minx, miny, maxx, maxy = combined.bounds
    Grp_width = maxx - minx
    Grp_height = maxy - miny
    Area = Grp_width * Grp_height
    return(Area,Grp_width,Grp_height)

####################################################
# Select the stage geometries and plot the solution
####################################################
def Create_stage_plots(gdf, idx, index_column, geometry_column, Plot):
    """
    Select the stage geometries and plot the solution
    """
    if Plot:
        # Filter geometries by the current index value
        filtered_top_gdf = gdf[(gdf[index_column] == idx) & (gdf['plane'] == 0)]
        filtered_bot_gdf = gdf[(gdf[index_column] == idx) & (gdf['plane'] == 1)]
        
        # Plot
        with plt.ioff():
            fig, ax = plt.subplots(figsize=(10, 6))
        
        if not filtered_top_gdf.empty:
            filtered_top_gdf.plot(ax=ax, facecolor='none', linestyle='--', edgecolor='blue')
        if not filtered_bot_gdf.empty:
            filtered_bot_gdf.plot(ax=ax, facecolor='none', linestyle='--', edgecolor='red')

        # Annotate each geometry with its ID
        for _, row in filtered_top_gdf.iterrows():
            if row[geometry_column].geom_type == 'Polygon':
                centroid = row[geometry_column].centroid
                ax.annotate(row['ID'], xy=(centroid.x, centroid.y), ha='center', fontsize=6)
        for _, row in filtered_bot_gdf.iterrows():
            if row[geometry_column].geom_type == 'Polygon':
                centroid = row[geometry_column].centroid
                ax.annotate(row['ID'], xy=(centroid.x, centroid.y-0.2), ha='center', fontsize=6)

        distance = create_intra_group_lines(gdf, index_column, idx, ax)
        # You can customize the plot further, e.g., setting a title that includes the index
        ax.set_title(f"Geometries for index value: {idx} , Dist {distance}")
        #plt.grid(True)
        plt.show()
    return()

####################################################
# Create another GA solution with shapely objects. Here the GA will try and hunt for positions and rotations which try to create optimisation. 
####################################################
def create_GA_variant2_solution_shapely_objects(gdf):
    global_margins = [2,2]
    MultiPoly_Object_List = []
    gdf.set_geometry('geometry', inplace=True)
    # Get unique index values
    unique_indices = gdf['index'].unique()
    unique_indices = unique_indices[~np.isnan(unique_indices)]    

    # Print the stage2_solution. 
    for idx in unique_indices:
        shapely_obj_list = []
        filtered_gdf = gdf[(gdf['index'] == idx) & (gdf['plane'] == 0)] # Only Top shown
        group_polygons = filtered_gdf[filtered_gdf['geometry'].geom_type  == 'Polygon']
        polygons_g = [T_geom for T_geom in group_polygons['geometry']]
        multi_polygon = geom.MultiPolygon(polygons_g)
        #print(idx, multi_polygon)
        MultiPoly_Object_List.append(multi_polygon)

    best_solution, transformed_polygons = GA_shapely_placement_analysis_stage3(brd_path, MultiPoly_Object_List, global_connections, global_conn_place, global_margins)
    print('Image generated at the brd location')

####################################################
# Main program
####################################################
if __name__ == "__main__":
    t1 = time.time()
    brd_path = r'C:\Manav_Projects\Python_Programs\Design_Databases\S32k344_Simple_design/'
    gdf_excel_db_file = brd_path +'gdf_data.xlsx'
    df = pd.read_excel(gdf_excel_db_file)

    for c in ["geometry","stage3_geometry","stage3_geometry_GA"]:
        df[c] = df[c] = df[c].apply(lambda wkt: loads(wkt) if wkt is not None else None)

    gdf = gpd.GeoDataFrame(df)
    gdf['Second_ID'] = gdf['Second_ID'].apply(safe_eval_if_tuple)

    print('Stage 1 plots will now be visible if the Plot is set to True')
    Create_stage1_plots(gdf, Plot = False)

    print('GA variant1 solution plot should be visible soon. Use run_ga_variant1 to disable the execution')
    global_shapes, global_conn_place, global_connections, global_netnames = create_data_for_GA(gdf)

    create_GA_variant1_solution(global_shapes, global_conn_place, global_connections)

    t2 = time.time()
    print(f'Execution time for the GA Variant1 program ',t2-t1)

    create_GA_variant2_solution_shapely_objects(gdf)
    
    print(f'Execution time for the GA Variant2 program ',time.time()-t1)


    Critical_nets = ['extal', 'xtal' , 'touch_gpio_a', 'touch_gpio_b', 'qspi_io0_ptd11', 'qspi_io1_ptd7','qspi_io2_ptd12','qspi_io3_ptc2','qspi_sck_ptd10',\
                     'usdhc_d0', 'usdhc_d1', 'usdhc_d2', 'usdhc_d3', 'usdhc_clk','enet_rxd0_ptc1', 'enet_rxd1_ptc0', 'enet_rxd2_ptd9', 'enet_rxd3_ptd8', 'enet_txd2_ptd6',\
                     'enet_txd3_ptd5','enet_rx_er_ptc16']
    
